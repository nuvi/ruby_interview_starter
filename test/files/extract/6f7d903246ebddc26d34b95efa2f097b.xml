<?xml version="1.0" encoding="UTF-8"?>
<document>
<type>mainstream</type>
<forum></forum>
<forum_title></forum_title>
<discussion_title>New functional programming language can generate C, Python code for apps | InfoWorld</discussion_title>
<language>english</language>
<gmt_offset></gmt_offset>
<topic_url>http://www.infoworld.com/article/3060838/application-development/new-functional-programming-language-can-generate-c-python-code-for-apps.html</topic_url>
<topic_text>

Informed news analysis every weekday New functional programming language can generate C, Python code for apps More like this Can someone else use my mobile data? Credit: Thinkstock The open source Futhark makes it easier to program for GPUs that speed up machine learning and other math-intensive apps Email a friend Use commas to separate multiple email addresses From Your message has been sent. Sorry Comments 
Researchers at the University of Copenhagen&apos;s Department of Computer Science recently unveiled Futhark , an open source functional programming language designed for creating code that runs on GPUs, for use in machine learning and other high-performance applications. 
Futhark is meant to be more convenient to use than standard C/C++ frameworks for programming GPUs. It can automatically generate both C and Python code to be integrated with existing apps. [ Get the most out of collaborative programming with InfoWorld&apos;s 20 essential pointers for Git and GitHub . | Keep up with hot topics in programming with InfoWorld&apos;s Application Development newsletter . ] 
Most GPU programming involves using frameworks like OpenCL or CUDA , both of which use variations of C or C++ to generate code that runs on the GPU. Futhark can generate C code, but is its own language , more similar to Haskell or Standard ML than C. (Futhark is itself written in Haskell.) 
Futhark&apos;s creators claim that the expressiveness of the language makes it easier to describe complex operations that use parallelism. This includes the ability to support nested parallelizations (parallel operations inside other parallel operations). Futhark can do this &quot;despite the complexities of efficiently mapping to the flat parallelism supported by hardware, as a great many programs depend on this feature,&quot; say the language&apos;s creators. 
Preliminary benchmarks pitting Futhark GPU programs against other GPU libraries showed mixed but promising results. For a maximum segment sum test, Futhark was nearly twice as fast as a competing open source project. In other cases, it matched or was only slightly slower than the competition. Futhark&apos;s developers attributed this to the newness of the language and its unrefined approach to allocating and reusing memory. 
The current Futhark toolchain can generate code capable of running on either the CPU or GPU, with a variety of targets. For the former, it generates C code compiled by the GCC; for the latter, it generates C code that uses the OpenCL platform. Thus, the same code run on whatever hardware is available to support it, in much the same manner GPU-accelerated apps like the MapD database can fall back to using the CPU if needed. 
Python users who want a speed boost can generate code with Futhark wrapped automatically in a Python module. The GPU code runs via PyOpenCL , which is a library for interfacing with GPUs. There are examples of this, such as a Futhark-driven GPU implementation of Conway&apos;s Game of Life . 
Because Futhark is still fundamentally a research project, it is not yet as polished or complete as other languages. The documentation is incomplete, but both docs and language are open source on GitHub. RELATED TOPICS 
</topic_text>
<spam_score>0.00</spam_score>
<post_num>1</post_num>
<post_id>post-1</post_id>
<post_url>http://www.infoworld.com/article/3060838/application-development/new-functional-programming-language-can-generate-c-python-code-for-apps.html</post_url>
<post_date>20160425</post_date>
<post_time></post_time>
<username>Serdar Yegulalp</username>
<post>

Informed news analysis every weekday New functional programming language can generate C, Python code for apps More like this Can someone else use my mobile data? Credit: Thinkstock The open source Futhark makes it easier to program for GPUs that speed up machine learning and other math-intensive apps Email a friend Use commas to separate multiple email addresses From Your message has been sent. Sorry Comments 
Researchers at the University of Copenhagen&apos;s Department of Computer Science recently unveiled Futhark , an open source functional programming language designed for creating code that runs on GPUs, for use in machine learning and other high-performance applications. 
Futhark is meant to be more convenient to use than standard C/C++ frameworks for programming GPUs. It can automatically generate both C and Python code to be integrated with existing apps. [ Get the most out of collaborative programming with InfoWorld&apos;s 20 essential pointers for Git and GitHub . | Keep up with hot topics in programming with InfoWorld&apos;s Application Development newsletter . ] 
Most GPU programming involves using frameworks like OpenCL or CUDA , both of which use variations of C or C++ to generate code that runs on the GPU. Futhark can generate C code, but is its own language , more similar to Haskell or Standard ML than C. (Futhark is itself written in Haskell.) 
Futhark&apos;s creators claim that the expressiveness of the language makes it easier to describe complex operations that use parallelism. This includes the ability to support nested parallelizations (parallel operations inside other parallel operations). Futhark can do this &quot;despite the complexities of efficiently mapping to the flat parallelism supported by hardware, as a great many programs depend on this feature,&quot; say the language&apos;s creators. 
Preliminary benchmarks pitting Futhark GPU programs against other GPU libraries showed mixed but promising results. For a maximum segment sum test, Futhark was nearly twice as fast as a competing open source project. In other cases, it matched or was only slightly slower than the competition. Futhark&apos;s developers attributed this to the newness of the language and its unrefined approach to allocating and reusing memory. 
The current Futhark toolchain can generate code capable of running on either the CPU or GPU, with a variety of targets. For the former, it generates C code compiled by the GCC; for the latter, it generates C code that uses the OpenCL platform. Thus, the same code run on whatever hardware is available to support it, in much the same manner GPU-accelerated apps like the MapD database can fall back to using the CPU if needed. 
Python users who want a speed boost can generate code with Futhark wrapped automatically in a Python module. The GPU code runs via PyOpenCL , which is a library for interfacing with GPUs. There are examples of this, such as a Futhark-driven GPU implementation of Conway&apos;s Game of Life . 
Because Futhark is still fundamentally a research project, it is not yet as polished or complete as other languages. The documentation is incomplete, but both docs and language are open source on GitHub. RELATED TOPICS 
</post>
<signature>

</signature>
<external_links>

</external_links>
<country>US</country>
<main_image>http://images.techhive.com/images/article/2016/03/fingers-100651667-primary.idge.jpg</main_image>
</document>
